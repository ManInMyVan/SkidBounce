/*
 * SkidBounce Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge, Forked from LiquidBounce.
 * https://github.com/ManInMyVan/SkidBounce/
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit.disablermodes.other

import net.ccbluex.liquidbounce.event.events.PacketEvent
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablermodes.DisablerMode
import net.ccbluex.liquidbounce.utils.extensions.nextShort
import net.ccbluex.liquidbounce.value.BooleanValue
import net.ccbluex.liquidbounce.value.IntValue
import net.ccbluex.liquidbounce.value.ListValue
import net.minecraft.network.play.client.C0FPacketConfirmTransaction
import net.minecraft.network.play.server.S32PacketConfirmTransaction
import kotlin.random.Random
import kotlin.random.nextInt

/**
 * @author ManInMyVan/SkidBounce
 * @author ManInMyVan
 */
object Transaction : DisablerMode("Transaction") {
    private val cancelClient by BooleanValue("CancelClient", false)
    private val cancelServer by BooleanValue("CancelServer", false)

    private val accept by BooleanValue("Accept", true) { active && !cancelClient }

    private val idMode by ListValue("IdMode", arrayOf("None", "Negative", "Constant", "Random"), "None") { active && !cancelClient }
    private val id by IntValue("Id", 0, -1..50) { active && !cancelClient && idMode == "Constant" }
    private val idMin by IntValue("IdMin", 0, -100..100) { active && !cancelClient && idMode == "Random" }
    private val idMax by IntValue("IdMax", 0, -100..100) { active && !cancelClient && idMode == "Random" }

    private val windowMode by ListValue("WindowMode", arrayOf("None", "Negative", "Constant", "Random"), "None") { active && !cancelClient }
    private val windowId by IntValue("WindowId", 0, -1..50) { active && !cancelClient && windowMode == "Constant" }
    private val windowMin by IntValue("WindowMin", 0, -100..100) { active && !cancelClient && windowMode == "Random" }
    private val windowMax by IntValue("WindowMax", 0, -100..100) { active && !cancelClient && windowMode == "Random" }

    override fun onPacket(event: PacketEvent) {
        when (event.packet) {
            is C0FPacketConfirmTransaction -> {
                var modify = false
                if (cancelClient) {
                    event.cancelEvent()
                    debug(Cancel, "Transaction")
                    return
                }

                // This is impossible in vanilla
                event.packet.accepted = accept

                if (!accept || windowMode != "None" || idMode != "None")
                    modify = true

                when (windowMode) {
                    "Negative" -> event.packet.windowId = -event.packet.windowId
                    "Constant" -> event.packet.windowId = windowId
                    "Random" -> event.packet.windowId = Random.nextInt(windowMin..windowMax)
                }

                when (idMode) {
                    "Negative" -> event.packet.uid = (-event.packet.uid).toShort()
                    "Constant" -> event.packet.uid = id.toShort()
                    "Random" -> event.packet.uid = Random.nextShort(idMin..idMax)
                }

                if (modify)
                    debug(Modify, "Transaction")
            }
            is S32PacketConfirmTransaction -> {
                if (cancelServer) {
                    event.cancelEvent()
                    debug(Cancel, "Transaction (Server)")
                }
            }
        }
    }
}
